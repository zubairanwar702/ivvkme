@model VendorModel
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-vendor-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl("Vendor", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(vendorUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}
<div class="page vendor-page">
    <div class="page-title">
        <h2><strong>@Model.Name</strong></h2>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.VendorDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="vendor-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @*contact vendor*@
        @if (Model.AllowCustomersToContactVendors)
        {
            <div class="contact-vendor my-3">
                <button type="button" class="btn btn-primary" onclick="setLocation('@Url.RouteUrl("ContactVendor", new { vendorId = Model.Id })')">
                    @T("ContactVendor")
                </button>
            </div>
        }
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @*product list*@
        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "grid")
            {
                <div class="subCategoryList product-grid">
                    <div class="row-sm">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-4 col-sm-6 col-6 product-container mb-3">
                                <partial name="_ProductBox" model="product" />
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="row-sm">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-12 mb-3">
                            <partial name="_ProductBoxList" model="product" />
                        </div>
                    }
                </div>

            }
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.VendorDetailsBottom, additionalData = Model })
    </div>
</div>

@model NewsItemModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-news-item-page");
}
<div class="page news-item-page">
    <div class="page-title">
        <h2>@Model.Title</h2>
    </div>
    <div class="page-body">
        <div class="news-body">
            <div class="date-container">
                <div class="date">
                    <span class="day">@Model.CreatedOn.ToString("dd")</span>
                    <span class="month">@Model.CreatedOn.ToString("MMMM")</span>
                </div>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsItemPageBeforeBody, additionalData = Model })
            <div class="content">
                @Html.Raw(Model.Full)
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsItemPageBeforeComments, additionalData = Model })
        @if (Model.AllowComments)
        {
            <div class="fieldset new-comment" id="comments">
                <h3 class="title">
                    <strong>@T("News.Comments.LeaveYourComment")</strong>
                </h3>
                <div class="notifications">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    @{
                        var result = TempData["nop.news.addcomment.result"] as string;
                    }
                    @if (!string.IsNullOrEmpty(result))
                    {
                        <div class="result alert alert-success">@result</div>
                    }
                </div>
                <form asp-route="NewsItem" asp-route-sename="@Model.SeName" method="post">
                    <div class="form-fields">
                        <div class="inputs form-group">
                            <label class="col-form-label" asp-for="AddNewComment.CommentTitle" asp-postfix=":"></label>
                            <input asp-for="AddNewComment.CommentTitle" class="enter-comment-title form-control" />
                            <span asp-validation-for="AddNewComment.CommentTitle"></span>
                        </div>
                        <div class="inputs form-group">
                            <label class="col-form-label" asp-for="AddNewComment.CommentText" asp-postfix=":"></label>
                            <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text form-control"></textarea>
                            <span asp-validation-for="AddNewComment.CommentText"></span>
                        </div>
                        @if (Model.AddNewComment.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                <nop-captcha />
                            </div>
                        }
                    </div>
                    <div class="buttons">
                        <button type="submit" name="add-comment" class="btn btn-primary news-item-add-comment-button">
                            @T("News.Comments.SubmitButton")
                        </button>
                    </div>
                </form>
            </div>
            if (Model.Comments.Count > 0)
            {
                <div class="comment-list mt-3">
                    <h5 class="title">
                        <span>@T("News.Comments")</span>
                    </h5>
                    <div class="comments">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="comment news-comment">
                                <div class="comment-info">
                                    <div class="user-info">
                                        @if (comment.AllowViewingProfiles)
                                        {
                                            <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a>
                                        }
                                        else
                                        {
                                            <span class="username">@(comment.CustomerName)</span>
                                        }

                                        @if (!string.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                        {
                                            <div class="avatar">
                                                @if (comment.AllowViewingProfiles)
                                                {
                                                    <a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="avatar-img-link">
                                                        <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="comment-content">
                                    <div class="comment-time">
                                        <label>@T("News.Comments.CreatedOn"):</label>
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                    <div class="comment-title">
                                        <strong class="comment-text">@comment.CommentTitle</strong>
                                    </div>
                                    <div class="comment-body">
                                        <p class="comment-text">@Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))</p>
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsItemPageInsideComment, additionalData = comment })
                            </div>
                        }
                    </div>
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.NewsItemPageAfterComments, additionalData = Model })
    </div>
</div>

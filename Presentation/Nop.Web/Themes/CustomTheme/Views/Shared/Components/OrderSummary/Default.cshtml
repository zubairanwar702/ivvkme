@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
<div class="order-summary-content mt-3" id="ordersummarypagecart">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    <partial name="_OrderReviewData" model="Model.OrderReviewData" />
    @if (Model.Items.Any())
    {
        if (Model.Warnings.Any())
        {
<div class="message-error d-table alert alert-danger p-3">
    <ul class="mb-0">
        @foreach (var warning in Model.Warnings)
        {
<li>@warning</li>
}
    </ul>
</div> } @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
                <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
                    <div class="shopping-cart-container">
                        <div class="row">
                            <div class="col-xl-8 col-12">
                                <table class="shopping-cart table-spacing">
                                    <colgroup>
                                        <col width="1">
                                        <col width="1">
                                        <col width="1">
                                        <col>
                                        <col width="1">
                                        <col width="1">
                                        <col width="1">
                                    </colgroup>
                                    @*<thead>
                                            <tr>
                                                @if (Model.IsEditable)
                                                {
                                                    <th class="remove-from-cart text-center">
                                                        @T("Remove")
                                                    </th>
                                                }
                                                @if (Model.ShowProductImages)
                                                {
                                                    <th class="product-picture text-center">
                                                        @T("ShoppingCart.Image")
                                                    </th>
                                                }
                                                <th class="product text-center">
                                                    @T("ShoppingCart.Product(s)")
                                                </th>
                                                <th class="unit-price text-center">
                                                    @T("ShoppingCart.UnitPrice")
                                                </th>
                                                <th class="quantity text-center">
                                                    @T("ShoppingCart.Quantity")
                                                </th>
                                                <th class="subtotal text-center">
                                                    @T("ShoppingCart.ItemTotal")
                                                </th>
                                            </tr>
                                        </thead>*@
                                    <tbody>
                                        @foreach (var item in Model.Items)
                                        {
                        <tr class="item-container">
                            @*@if (Model.IsEditable)
                                {
                                    <td class="remove-from-cart text-center">
                                        <input type="checkbox" id="@T("Remove")-@(item.Id)" name="removefromcart" class="d-none checkbox-u" value="@(item.Id)">
                                        <label for="@T("Remove")-@(item.Id)"></label>
                                        <p class="remove" onclick="if ($(this).parent().find('input').prop('checked') == true) { $(this).parent().find('input').prop('checked', false) } else { $(this).parent().find('input').prop('checked', true)}">@T("Remove")</p>
                                    </td>
                                }*@
                            @if (Model.ShowProductImages)
                            {
        <td class="product-picture text-center">
            <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
        </td>}
                            <td class="product">
                                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
                                @if (Model.ShowSku && !String.IsNullOrEmpty(item.Sku))
                                {
            <span class="sku-number">@item.Sku</span>}
                                @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                {
            <div class="attributes small">
                @Html.Raw(item.AttributeInfo)
            </div>}
                                @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                {
            <div class="recurring-info">
                @Html.Raw(item.RecurringInfo)
            </div>}
                                @if (Model.IsEditable && item.AllowItemEditing)
                                {
                                    var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                    editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
            <div class="edit-item mb-1 mt-1">
                <a class="btn btn-sm btn-warning" href="@editCartItemUrl">@T("Common.Edit")</a>
            </div>}
                                @if (item.Warnings.Any())
                                {
            <div class="message-error">
                <ul>
                    @foreach (var warning in item.Warnings)
                    {
<li>@warning</li>}
                </ul>
            </div>}
                            </td>
                            @*<td class="unit-price">
                                    <span class="unit-price-text">@T("ShoppingCart.UnitPrice"):</span>
                                    <span class="product-unit-price price">@item.UnitPrice</span>
                                </td>*@

                            <td class="subtotal">
                                @if (!String.IsNullOrEmpty(item.Discount))
                                {
            <div class="d-flex flex-column">
                <p class="mb-0 prod-total">@item.SubTotal</p>
                <div class="discount text-success text-center">
                    <span>@T("ShoppingCart.ItemYouSave"): </span>
                    <span>@item.Discount</span>
                    @if (item.MaximumDiscountedQty.HasValue)
                    {
<div class="discount-additional-info font-weight-light font-italic">
    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
</div>}
                </div>
            </div> }
        else
        {
<span class="subtotal-text">@T("ShoppingCart.ItemTotal"):</span>
                        <p class="mb-0 prod-total">@item.SubTotal</p>}
                                @if (Model.IsEditable)
                                {
                                    if (item.AllowedQuantities.Count > 0)
                                    {
            <div class="quantity">
                <select id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" class="custom-select form-control qty-dropdown" onchange="ChangeShoppingCart()">
                    @foreach (var qty in item.AllowedQuantities)
                    {
<option id="itemqty@(item.Id)" selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
}
                </select>
            </div> }
        else
        {
<div class="quantity margin-t-30">
    <div class="d-inline-flex">
        <div class="minus" onclick="$(this).parent().find('.qty-input').attr('value', function (i, oldval) {if(oldval>1){ return --oldval; } else { return oldval}}).trigger('change')"></div>
        <input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input form-control text-center" />
        <div class="plus" onclick="$(this).parent().find('.qty-input').attr('value', function (i, oldval) { return ++oldval; }).trigger('change')"></div>
    </div>
</div> }

}
else
{
<div class="quantity">
    <input id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input-ro form-control text-center" readonly />
</div>}


                            </td>
                        </tr>
}
                                    </tbody>
                                </table>
                                @if (Model.IsEditable)
                                {
                <div class="common-buttons d-inline-flex align-items-center  w-100">
                    <button type="submit" name="updatecart" class="btn blue-bg-btn border-radius update-cart-button d-flex align-items-center">
                        <span class="lnr linearicons-return2 pr-2"></span>
                        <span class="d-sm-block">@T("ShoppingCart.UpdateCart")</span>
                    </button>
                    <button type="submit" name="continueshopping" class="btn btn-warning border-radius d-flex justify-content-center continue-shopping-button ml-sm-1"><span>@T("ShoppingCart.ContinueShopping")</span></button>
                    @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                </div>}
                            </div>
                            <div class="col-xl-4 col-12">

                                <div class="coupan-wrapper">
                                    <div class="form-row cart-options">
                                        @if (Model.IsEditable)
                                        {
                                <div class="p-3 checkoutAttributes">
                                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                                </div>
                                }
                                        <div class="selected-checkout-attributes ml-auto p-3 text-right">
                                            @await Component.InvokeAsync("SelectedCheckoutAttributes")
                                        </div>
                                    </div>
                                    @if (Model.IsEditable && Model.Items.Any() && Model.DisplayTaxShippingInfo)
                                    {
                                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                        //of course, you can modify appropriate locales to include VAT info there
                                <div class="tax-shipping-info d-flex justify-content-end mt-2 mb-2">
                                    <span class="taxHelper">
                                        @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                    </span>
                                </div>}
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_cart_footer" })
                                    @if (Model.IsEditable)
                                    {
                                <div class="cart-collaterals row mx-0">
                                    @if (Model.GiftCardBox.Display || Model.DiscountBox.Display)
                                    {
                                <div class="p-3">
                                    <partial name="_GiftCardBox" model="Model.GiftCardBox" />
                                    <partial name="_DiscountBox" model="Model.DiscountBox" />
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                                </div>}
                                </div>}
                                </div>
                                <div class="totals float-sm-right ml-auto w-100 margin-t-12 pt-0">
                                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                                    @if (Model.IsEditable)
                                    {
                                        if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                        {
                    <div class="card text-white card-danger text-center min-amount-warning">
                        <div class="card-body p-3">
                            <blockquote class="card-bodyquote mb-0">
                                <span>@Model.MinOrderSubtotalWarning</span>
                            </blockquote>
                        </div>
                    </div>}
            }
                                    @if (Model.IsEditable)
                                    {
                                        if (Model.TermsOfServiceOnShoppingCartPage)
                                        {
                    <div class="col-sm-12 margin-t-12 terms-of-service">
                        <label class="custom-control custom-checkbox">
                            <input class="custom-control-input" id="termsofservice" type="checkbox" name="termsofservice" />
                            <span class="sr-only">checkbox</span>
                            <span class="custom-control-label"></span>
                            @if (Model.TermsOfServicePopup)
                            {
    <span>@T("Checkout.TermsOfService.IAccept")<a class="custom-control-description read pl-1 font-weight-bold" onclick="javascript:OpenWindow('@Url.RouteUrl("TopicPopup", new { SystemName = "conditionsofuse" })', 450, 500, true)">@T("Checkout.TermsOfService.Read")</a></span> }
else
{
<span>@T("Checkout.TermsOfService.IAccept")<a class="custom-control-description read pl-1 font-weight-bold" href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a></span>}
                        </label>
                    </div> }
<div class="checkout-buttons text-center mt-3">
    @if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
    {
<script asp-location="Footer" type="text/javascript">
    $(document).ready(function () {
        $('#checkout').click(function () {
            //terms of service
            var termOfServiceOk = true;
            if ($('#termsofservice').length > 0) {
                //terms of service element exists
                if (!$('#termsofservice').is(':checked')) {
                    $("#ModalConditionsOfUse").modal('show');
                    $("body").removeAttr("style");
                    $(".navUp").removeAttr("style");
                    termOfServiceOk = false;
                } else {
                    termOfServiceOk = true;
                }
            }
            return termOfServiceOk;
        });
    });


</script> if (orderSettings.CheckoutDisabled)
                        {
<div class="checkout-disabled alert alert-danger p-3">
    @T("Checkout.Disabled")
</div> }
else
{
<button type="submit" id="checkout" name="checkout" value="checkout" class="blue-bg-btn blue-bg-btn btn checkout-button">
    @T("Checkout.Button")
</button>}
}
</div>
                    <div class="addon-buttons">
                        @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                        @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                        {
    @await Component.InvokeAsync(pm)}
                    </div>}
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (Model.IsEditable)
                    {
    <div class="px-3">
        @await Component.InvokeAsync("CrossSellProducts")
    </div>}
                </form> }
            else
            {
<div class="no-data alert text-danger alert-danger text-center mx-3">
    @T("ShoppingCart.CartIsEmpty")
</div>}
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
</div>
<div class="modal fade" id="ModalConditionsOfUse" tabindex="-1" role="dialog" aria-labelledby="ModalLabel">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ModalLabel">@T("Checkout.TermsOfService")</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span class="lnr linearicons-cross"></span>
                </button>
            </div>
            <div class="modal-body">
                @T("Checkout.TermsOfService.PleaseAccept")
            </div>
        </div>
    </div>
</div>
@inject IThemeContext themeContext
@{
    Layout = "_Root.Head";
    var themeName = themeContext.WorkingThemeName;
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Themes/{themeName}/Content/js/home.js");
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")
<main class="c-offcanvas-content-wrap" role="main">
    @await Html.PartialAsync("_Header")
    <script asp-location="Footer">
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
    </script>
    <section class="section-main">
        <div class="container">
            <div style="display:none;">  @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageTop })</div>
        </div> 
    </section>
    <section class="section-homepage-tittle">
        <div class="container-fluid">
            
        </div>
    </section>

    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })

        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync("Footer")
    </main>
    <aside class="js-offcanvas" data-offcanvas-options='{"modifiers":"left,push"}' id="off-canvas-left-push" role="complementary"></aside>
    @await Component.InvokeAsync("FlyoutShoppingCart")
    @await Component.InvokeAsync("EuCookieLaw")
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })

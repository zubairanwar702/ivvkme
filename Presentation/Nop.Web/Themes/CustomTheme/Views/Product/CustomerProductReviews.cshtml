@model CustomerProductReviewsModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.CustomerProductReviews").Text);
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-my-product-reviews-list-page");
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.ProductReviews })
}
<div class="page account-page inner-page my-product-reviews-list-page">
    <div class="page-title">
        <h2>@T("Account.MyAccount") - @T("Account.CustomerProductReviews")</h2>
    </div>
    <div class="page-body">
        @if (Model.ProductReviews.Count > 0)
        {
            foreach (var review in Model.ProductReviews)
            {
                var ratingPercent = review.Rating * 20;
                <h5 class="d-inline-flex align-items-center justify-content-sm-start justify-content-center flex-wrap w-100 px-3 py-2 bg2 border-bottom">
                    <label class="mr-3 mb-0">@T("Account.CustomerProductReviews.ProductReviewFor"):</label>
                    <a href="@Url.RouteUrl("Product", new {SeName = review.ProductSeName})">@review.ProductName</a>
                </h5>
                <div class="d-sm-inline-flex d-flex flex-sm-row flex-column product-review-item border-bottom w-100 mb-3 pb-3">
                    <div class="d-flex flex-column justify-content-start align-items-center align-items-sm-start text-center text-sm-left px-3">
                        <div class="product-review-box mb-1">
                            <div class="ratings">
                                <div class="rating-box">
                                    <div class="rating" style="width: @(ratingPercent)%">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="review-info">
                            <span class="date">
                                <span>@review.WrittenOnStr</span>
                            </span>
                        </div>
                    </div>
                    <div class="d-flex flex-column justify-content-sm-start justify-content-center align-items-sm-start align-items-center w-100 py-sm-0 py-3 px-sm-3 px-0">
                        <h6 class="review-title">
                            <strong>@review.Title</strong>@(!string.IsNullOrEmpty(review.ApprovalStatus) ? $" - {review.ApprovalStatus}" : null)
                        </h6>
                        <div class="review-text">
                            @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                        </div>
                        @foreach (var reviewType in review.AdditionalProductReviewList.Where(x => x.Rating > 0))
                        {
                            var ratingExtPercent = reviewType.Rating * 20;
                            <div class="review-type-rating-ext">
                                <div class="review-title">
                                    <i>@reviewType.Name</i>
                                </div>
                                <div class="product-review-box">
                                    <div class="ratings">
                                        <div class="rating-box">
                                            <div class="rating" style="width: @(ratingExtPercent)%">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(review.ReplyText))
                        {
                            <div class="reply">
                                <div class="reply-header">
                                    @T("Reviews.Reply")
                                </div>
                                <div class="reply-text">
                                    @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            var pager = Html.Pager(Model.PagerModel);
            if (!string.IsNullOrEmpty(pager.ToHtmlString()))
            {
                <div class="pager">
                    @pager
                </div>
            }
        }
        else
        {
            <div class="no-data">
                @T("Account.CustomerProductReviews.NoRecords")
            </div>
        }
    </div>
</div>
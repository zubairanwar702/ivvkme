@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
                <li class="breadcrumb-item">
                    <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")"><span class="lnr linearicons-home4"></span></a>
                    @*<span class="delimiter">@breadcrumbDelimiter</span>*@
                </li>
                @{ int position = 1; }
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                        var isLastCategory = cat.Id == Model.Id;
                        @if (isLastCategory)
                        {
                            <li class="breadcrumb-item" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                                <strong class="current-item" itemprop="name">@cat.Name</strong>
                                <span itemprop="item" itemscope itemtype="http://schema.org/Thing"
                                      id="@Url.RouteUrl("Category", new {SeName = cat.SeName})">
                                </span>
                                <meta itemprop="position" content="@position" />
                            </li>
                        }
                        else
                        {
                            <li class="breadcrumb-item active" aria-current="page" itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                                <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                                    <span itemprop="name">@cat.Name</span>
                                </a>
                                <meta itemprop="position" content="@position" />
                            </li>
                        }
                    position++;
                }
            </ol>
        </nav>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}
<div class="page category-page">
    <div class="page-title">
        <h2><strong>@Model.Name</strong></h2>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="category-grid sub-category-grid">
                <div class="d-inline-flex flex-wrap">
                    @foreach (var item in Model.SubCategories)
                    {
                        <div class="item-box mr-3 mb-3">
                            <div class="sub-category-item">
                                <h6 class="title">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </h6>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @section FeaturedProducts {
            @if (Model.FeaturedProducts.Count > 0)
            {

                <div class="product-grid block featured-product-grid mb-3">
                    <div class="d-inline-flex flex-nowrap align-items-center w-100 mb-3 mt-xl-0 mt-3">
                        <h5 class="title w-100 m-0">
                            <strong>@T("Products.FeaturedProducts")</strong>
                        </h5>
                        <div class="d-inline-flex align-items-center CatalogProducts-nav pl-3">
                            <div class="custom-button-prev mr-1">
                                <span class="lnr linearicons-chevron-left"></span>
                            </div>
                            <div class="custom-button-next">
                                <span class="lnr linearicons-chevron-right"></span>
                            </div>
                        </div>
                    </div>
                    <div class="swiper-container CatalogProducts">
                        <div class="swiper-wrapper">
                            @foreach (var item in Model.FeaturedProducts)
                            {
                                <div class="swiper-slide">
                                    @await Html.PartialAsync("_HomeProducts", item)
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
        @*<div class="product-filters">

            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                }

            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                }
        </div>*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })

        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "grid")
            {
                <div class="subCategoryList product-grid">
                    <div class="row-sm">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-xl-3 col-lg-4 col-md-4 col-sm-6 col-6 product-container mb-3">
                                <partial name="_ProductBox" model="product" />
                            </div>
                        }
                    </div>                  
                </div>
            }
            else
            {
                <div class="product-list">
                    <div class="row-sm">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-12 mb-3">
                                <partial name="_ProductBoxList" model="product" />
                            </div>
                        }
                    </div>
                </div>

            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_bottom", additionalData = Model.Id })
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>

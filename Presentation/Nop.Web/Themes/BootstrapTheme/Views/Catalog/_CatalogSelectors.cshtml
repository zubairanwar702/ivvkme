@model CatalogPagingFilteringModel

<div class="generalMarginSupporter categoryGrid mb-3">
    <div class="row-sm">
        @*filters*@
        <a class="js-offcanvas-trigger filter-button btn btn-warning d-lg-none d-flex align-items-center" data-offcanvas-trigger="leftSide" href="#leftSide"><span class="lnr linearicons-chart-settings"></span></a>
        @*sorting*@
        @if (Model.AllowProductSorting)
        {
            <div class="col-md-auto col">
                <label class="mb-0" for="custom-select">@T("Catalog.OrderBy")</label>
                @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { @class = "form-control custom-select", onchange = "setLocation(this.value);" })
            </div>
        }
        @*page size*@
        @if (Model.AllowCustomersToSelectPageSize)
        {
            <div class="col-md-auto col">
                <div class="col-12 px-0">
                    <span class="mb-1">@T("Catalog.PageSize")</span>
                </div>
                <div class="d-flex flex-row">
                    <div class="col">
                        <div class="row">
                            <label for="products-pagesize" class="sr-only">@T("Catalog.PageSize")</label>
                            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { @class = "custom-select form-control", onchange = "setLocation(this.value);" })
                        </div>
                    </div>
                    <div class="d-none d-lg-block pt-2 pl-2">
                        @T("Catalog.PageSize.PerPage")
                    </div>
                </div>
            </div>
        }
        @*view mode*@
        @if (Model.AllowProductViewModeChanging)
        {
            <div class="ml-auto col-auto text-sm-right rightHead page-selectors pr-0 d-md-block d-none">
                <div class="col text-right">
                    <span>@T("Catalog.ViewMode")</span>
                </div>

                @if (Model.AvailableViewModes.Count > 1)
                {

                    var gridMode = Model.AvailableViewModes[0];
                    var listMode = Model.AvailableViewModes[1];

                    <div class="col justify-content-end btn-group">
                        <a class="viewmode-icon grid @if(gridMode.Selected){<text>selected text-dark</text>}" href="@gridMode.Value" title="@gridMode.Text">
                            <span class="icon-sm lnr linearicons-icons"></span>
                            <span class="sr-only">viewmode grid</span>
                        </a>
                        <a class="viewmode-icon list @if (listMode.Selected){<text>selected text-dark</text>}" href="@listMode.Value" title="@listMode.Text"><span class="icon-sm linearicons-list4"></span><span class="sr-only">viewmode list</span></a>
                    </div>
                }
            </div>
        }
    </div>
</div>

@model CheckoutShippingAddressModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-shipping-address-page");
}
<div class="page checkout-page shipping-address-page">
    <div class="container">
        @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Address })
        <h1 class="generalTitle my-3 h2 w-100 text-center">@T("Checkout.ShippingAddress")</h1>
        <div class="page-body checkout-data">
            <form asp-route="CheckoutShippingAddress" method="post">

                @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
                {
                    @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $(document).on('checkout_toggle_pickup_in_store', function (e) {
                                if (e.checked)
                                    $('#shipping-addresses-form').hide();
                                else
                                    $('#shipping-addresses-form').show();
                            });
                        });
                    </script>
                }

                @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
                {
                    <div class="shipping-addresses" id="shipping-addresses-form">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutShippingAddressTop })
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <div class="section select-shipping-address">
                                <h5 class="title my-3">
                                    <strong>@T("Checkout.SelectShippingAddress")</strong>
                                </h5>
                                @if (Model.InvalidExistingAddresses.Count > 0)
                                {
                                    <label class="min-amount-warning">
                                        @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                                    </label>
                                }
                                <div class="address-grid col-12 px-0">
                                    <div class="row">
                                        @foreach (var item in Model.ExistingAddresses)
                                        {
                                            <div class="address-item col-lg-4 col-md-6 col-12">
                                                <ul class="address-box card p-2 border">
                                                    <li class="name">
                                                        @item.FirstName @item.LastName
                                                    </li>
                                                    <li class="email">
                                                        <label>@T("Address.Fields.Email"):</label>
                                                        <span>@item.Email</span>
                                                    </li>
                                                    @if (item.PhoneEnabled)
                                                    {
                                                        <li class="phone">
                                                            <label>@T("Address.Fields.PhoneNumber"):</label>
                                                            <span>@item.PhoneNumber</span>
                                                        </li>
                                                    }
                                                    @if (item.FaxEnabled)
                                                    {
                                                        <li class="fax">
                                                            <label>@T("Address.Fields.FaxNumber"):</label>
                                                            <span>@item.FaxNumber</span>
                                                        </li>
                                                    }
                                                    @if (item.CompanyEnabled && !string.IsNullOrEmpty(item.Company))
                                                    {
                                                        <li class="company">
                                                            @item.Company
                                                        </li>
                                                    }
                                                    @if (item.StreetAddressEnabled)
                                                    {
                                                        <li class="address1">
                                                            @item.Address1
                                                        </li>
                                                    }
                                                    @if (item.StreetAddress2Enabled && !string.IsNullOrEmpty(item.Address2))
                                                    {
                                                        <li class="address2">
                                                            @item.Address2
                                                        </li>
                                                    }
                                                    @if (item.CityEnabled && !string.IsNullOrEmpty(item.City) ||
                                                    item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                    item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                    item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                    {
                                                        <li class="city-state-zip">
                                                            @if (item.CityEnabled && !string.IsNullOrEmpty(item.City))
                                                            {
                                                                @item.City
                                                                @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County) ||
                                                                item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                                item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                                {
                                                                    <text>,</text>
                                                                }
                                                            }
                                                            @if (item.CountyEnabled && !string.IsNullOrEmpty(item.County))
                                                            {
                                                                @item.County
                                                                @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName) ||
                                                                item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                                {
                                                                    <text>,</text>
                                                                }
                                                            }
                                                            @if (item.StateProvinceEnabled && !string.IsNullOrEmpty(item.StateProvinceName))
                                                            {
                                                                @item.StateProvinceName
                                                                @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                                {
                                                                    <text>,</text>
                                                                }
                                                            }
                                                            @if (item.ZipPostalCodeEnabled && !string.IsNullOrEmpty(item.ZipPostalCode))
                                                            {
                                                                @item.ZipPostalCode
                                                            }
                                                        </li>
                                                    }
                                                    @if (item.CountryEnabled && !string.IsNullOrEmpty(item.CountryName))
                                                    {
                                                        <li class="country">
                                                            @item.CountryName
                                                        </li>
                                                    }
                                                    @if (!string.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                                    {
                                                        <li class="custom-attributes-view">
                                                            @Html.Raw(item.FormattedCustomAddressAttributes)
                                                        </li>
                                                    }
                                                </ul>
                                                <div class="select-button my-3">
                                                    <input type="button" value="@T("Checkout.ShipToThisAddress")" class="btn btn-info  select-shipping-address-button" onclick="setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new {addressid = item.Id})') " />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutShippingAddressMiddle })
                        <div class="section new-shipping-address">
                            <h5 class="title">
                                @if (Model.ExistingAddresses.Count > 0)
                                {
                                    <strong>@T("Checkout.OrEnterNewAddress")</strong>
                                }
                                else
                                {
                                    <strong>@T("Checkout.EnterShippingAddress")</strong>
                                }
                            </h5>
                            <div class="enter-address">
                                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                                @{
                                    var dataDictAddress = new ViewDataDictionary(ViewData);
                                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                                    @await Html.PartialAsync("_CreateOrUpdateAddress", Model.ShippingNewAddress, dataDictAddress)
                                }
                            </div>
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutShippingAddressBottom })
                    </div>
                }
                <div class="buttons mt-3">
                    <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn btn-info  new-address-next-step-button" />
                </div>

            </form>
            <div class="section order-summary">
                <h5 class="title my-3">
                    <strong>@T("Checkout.OrderSummary")</strong>
                </h5>
                @await Component.InvokeAsync("OrderSummary")
            </div>
        </div>
    </div>
</div>
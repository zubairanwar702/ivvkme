@inject IThemeContext themeContext
@{
    Layout = "_Root.Head";
    var themeName = themeContext.WorkingThemeName;
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Themes/{themeName}/Content/js/home.js");
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")
<main class="c-offcanvas-content-wrap" role="main">
    @await Html.PartialAsync("_Header")
    <script asp-location="Footer">
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
    </script>
    <section class="section-main pt-3 pb-3">
        <div class="container">
            <div class="card main-card">
                <div class="card-body">
                    <div class="row row-sm">
                        <aside class="col-lg-3 mb-lg-0 mb-3 col-12 d-lg-flex d-none">
                            <div id="mainNav_container" class="w-100">
                                <h4 class="by-category d-lg-flex d-none text-uppercase mb-lg-2 mb-0"><span class="menu-icon"><span></span><span></span><span></span></span><strong>@T("home.categories.text")</strong></h4>
                                <nav class="mainNav navbar navbar-light p-0">
                                    <div class="collapse navbar-collapse show" id="navbarSupportedContent">
                                        <ul class="navbar-nav menu-category flex-column w-100">
                                            @await Component.InvokeAsync("TopMenu")
                                        </ul>
                                    </div>
                                </nav>
                            </div>
                        </aside> <!-- col.// -->
                        <div class="col-xl-6 col-lg-9 col-12">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageTop })
                        </div> <!-- col.// -->
                        <aside class="col-xl-3 col-12">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })
                            @await Component.InvokeAsync("HomepageProducts")
                        </aside>
                    </div> <!-- row.// -->
                </div> <!-- card-body .// -->
            </div> <!-- card.// -->
        </div> <!-- container .//  -->
    </section>
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })

        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @await Component.InvokeAsync("Footer")
    </main>
    <aside class="js-offcanvas" data-offcanvas-options='{"modifiers":"left,push"}' id="off-canvas-left-push" role="complementary"></aside>
    @await Component.InvokeAsync("FlyoutShoppingCart")
    @await Component.InvokeAsync("EuCookieLaw")
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })

@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper
@inject Nop.Core.Domain.Customers.CustomerSettings customersettings

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
<div class="widgets-wrap header-links float-right row no-gutters w-100 d-inline-flex justify-content-lg-between justify-content-end py-1">
    <div class="col-auto">
        @if (Model.IsAuthenticated)
        {
            <div class="widget-header dropdown">
                <a href="#" data-toggle="dropdown" data-offset="20,10">
                    <div class="icontext">
                        <div class="icon-wrap"><span class="text-white icon-sm lnr linearicons-user"></span></div>
                        <div class="d-inline-flex align-items-end text-wrap text-white pl-0">
                            <span class="d-lg-block d-none">@T("Account.MyAccount")</span>
                            <span class="lnr linearicons-chevron-down pl-2"></span>
                        </div>
                    </div>
                </a>
                <div class="dropdown-menu dropdown-menu-right">
                    @await Component.InvokeAsync("TaxTypeSelector")
                    @await Component.InvokeAsync("CurrencySelector")
                    @await Component.InvokeAsync("LanguageSelector")
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
                    @await Component.InvokeAsync("AdminHeaderLinks")
                    <a href="@Url.RouteUrl("CustomerInfo")" class="dropdown-item">@T("Account.MyAccount")@*@Model.CustomerName*@</a>
                    @if (Model.AllowPrivateMessages)
                    {
                        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="dropdown-item d-inline-flex align-items-center">
                            <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                            @if (!string.IsNullOrEmpty(Model.UnreadPrivateMessages))
                            {
                                <span class="inbox-unread badge bg-warning ml-1">@Model.UnreadPrivateMessages</span>
                            }
                            else
                            {
                                <span class="inbox-unread badge bg-warning ml-1">0</span>
                            }
                        </a>
                    }
                    <a href="@Url.RouteUrl("Logout")" class="dropdown-item">@T("Account.Logout")</a>
                </div> <!--  dropdown-menu .// -->
            </div> <!-- widget-header .// -->
        }
        else
        {
            var returnUrl = webHelper.GetRawUrl(Context.Request);
            <div class="widget-header dropdown">
                <a href="#" data-toggle="dropdown" data-offset="20,10">
                    <div class="icontext">
                        <div class="icon-wrap"><span class="text-white icon-sm lnr linearicons-user"></span></div>
                        <div class="d-inline-flex align-items-end text-wrap text-white pl-0">
                            <div class="d-lg-flex d-none flex-column">
                                <span class="d-lg-block d-none">@T("Account.Login")</span>
                                <span class="d-lg-block d-none">@T("Account.MyAccount")</span>
                            </div>
                            <span class="lnr linearicons-chevron-down pl-2"></span>
                        </div>
                    </div>
                </a>
                <div class="dropdown-menu dropdown-menu-right">
                    @await Component.InvokeAsync("TaxTypeSelector")
                    @await Component.InvokeAsync("CurrencySelector")
                    @await Component.InvokeAsync("LanguageSelector")
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
                    <form class="px-4 py-3" asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" id="login-nav">
                        <div class="form-group">
                            @if (customersettings.UsernamesEnabled)
                            {
                                <label>@T("account.login.fields.username")</label>
                                <input autofocus="autofocus" class="form-control username valid" data-val="true" data-val-username="@T("account.fields.username.notvalid")" data-val-required="@T("account.fields.username.required")" id="Username" name="Username" type="text" value="" required>
                            }
                            else
                            {
                                <label>@T("account.login.fields.email")</label>
                                <input autofocus="autofocus" class="form-control email valid" data-val="true" data-val-email="@T("common.wrongemail")" data-val-required="@T("account.login.fields.email.required")" id="Email" name="Email" type="text" value="" required>
                            }
                        </div>
                        <div class="form-group">
                            <label>Password</label>
                            <input class="form-control password valid" id="Password" name="Password" type="password">
                        </div>
                        <button type="submit" class="btn btn-primary">@T("Account.Login")</button>
                        @*<label for="RememberMe" class="custom-control custom-checkbox">
                                <input class="custom-control-input" data-val="true" data-val-required="'Remember Me' must not be empty." id="RememberMe" name="RememberMe" type="checkbox" value="true">
                                <span class="custom-control-indicator"></span>
                                <span class="custom-control-description">@T("keepmeloggedin")</span>
                            </label>*@
                    </form>
                    <hr class="dropdown-divider">
                    <a class="dropdown-item" href="@Url.RouteUrl("Register")">@T("Account.Register")</a>
                    <a class="dropdown-item" href="@Url.RouteUrl("PasswordRecovery")">@T("Account.Login.ForgotPassword")</a>
                </div> <!--  dropdown-menu .// -->
            </div> <!-- widget-header .// -->
        }
    </div> <!-- col.// -->
    <div class="col-auto d-inline-flex ml-lg-auto ml-0">
        @if (Model.WishlistEnabled)
        {
            <a href="@Url.RouteUrl("Wishlist")" class="widget-header d-lg-inline-block d-none">
                <div class="icontext">
                    <div class="icon-wrap"><span class="text-white icon-sm lnr linearicons-heart"></span></div>
                    <div class="text-wrap qty">
                        <span class="small round badge badge-warning wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </div>
                </div>
            </a>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <a class="widget-header c-button js-offcanvas-trigger mini-cart-button" data-offcanvas-trigger="off-canvas-right-push">
                <div class="icontext">
                    <div class="icon-wrap"><span class="text-white icon-sm lnr linearicons-bag2"></span></div>
                    <div class="text-wrap qty">
                        <span class="small round badge badge-warning cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    </div>
                </div>
            </a>
        }
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div> <!-- widgets-wrap.// row.// -->
